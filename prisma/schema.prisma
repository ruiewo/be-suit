generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  role          Role         @default(user)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Department    Department[]
}

enum Role {
  guest
  user
  admin
  superAdmin
}

//管理番号、Type、使用者、管理者、使用・保管場所、社外かどうか、登録日、更新日、削除日、備考 
// spec
// PC名、メーカー、型番、製品名、付属品、

model Equipment {
  id             Int    @id @default(autoincrement())
  // 管理番号
  category       String // PC-DのPC部分 {mainCategory}-{subCategory}
  subCategory    String // PC-DのD部分 {mainCategory}-{subCategory}
  categorySerial Int // 種別ごとの連番（PC-D以後の連番部分）

  maker       String // メーカー
  modelNumber String // 型番
  details     Json? // JSON
  note        String // 備考

  // 貸与関係
  group      String // 管理者
  place      String // 使用・保管場所
  rentalDate DateTime? // 貸出日
  rentalUser String? // 外部キーにしたいが退職済みユーザの扱いが複雑になるため文字列とする。
  returnDate DateTime? // 返却日

  // 登録・削除
  registrationDate DateTime? // 登録日 
  deletedDate      DateTime? // 削除日
  inventoryDate    DateTime? // 棚卸日（総務が確認した日） 
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt // 更新日
}

model Category {
  code          String  @id
  label         String
  enable        Boolean @default(true)
  subCategories Json    @default("[]")
  columns       Json    @default("[]")
}

model Department {
  id       Int     @id @default(autoincrement())
  label    String
  enable   Boolean @default(true)
  leaderId String?
  leader   User?   @relation(fields: [leaderId], references: [id])
}

model Location {
  id     Int     @id @default(autoincrement())
  label  String
  enable Boolean @default(true)
}

// ↓↓ for authentications

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
